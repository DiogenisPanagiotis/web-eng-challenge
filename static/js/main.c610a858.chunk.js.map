{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["initial","DAYS","HOURS","MINUTES","SECONDS","App","useState","input","setInput","calc","counter","setCounter","showCounter","setShowCounter","useEffect","timer","setInterval","clearInterval","className","src","alt","border","Object","keys","map","unit","onChange","target","state","value","placeholder","maxLength","console","log","Math","floor","renderTimeLeft","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAGMA,G,MAAU,CACfC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,IAsFKC,MAnFf,WAAgB,IAAD,EAEYC,mBAASN,GAFrB,mBAEPO,EAFO,KAEAC,EAFA,KAIRC,EAAO,WAEZ,OAAiB,MADuBF,EAAlCN,KAC+B,KADGM,EAA5BL,MAC8C,GADlBK,EAArBJ,QAAqBI,EAAZH,SALf,EASgBE,mBAASG,KATzB,mBASPC,EATO,KASEC,EATF,OAUwBL,oBAAS,GAVjC,mBAUPM,EAVO,KAUMC,EAVN,KA+Dd,OAnDAC,qBAAU,WACT,IAAMC,EAAQL,EAAU,GAAKM,aAAY,kBAAML,EAAWD,EAAU,KAAI,KACxE,OAAO,kBAAMO,cAAcF,MACzB,CAACL,IAiDH,sBAAKQ,UAAU,MAAf,UACC,qBAAKA,UAAU,QAAf,mBACA,qBAAKC,IAAI,0CAA0CD,UAAU,OAAOE,IAAI,aAAaC,OAAO,MAC5F,sBAAKH,UAAU,kBAAf,WACGN,GAtBGU,OAAOC,KAAKhB,GAAOiB,KAAI,SAACC,GAC9B,OACC,sBAAKP,UAAU,iBAAf,UACC,uBACCQ,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcnB,GAAS,SAAAoB,GAAK,kCAASA,GAAT,kBAAiBH,EAAOE,EAAOE,YACrEA,MAAOtB,EAAMkB,GACbP,UAAU,QACVY,YAAa,KACbC,UAAW,GACNN,GAEN,qBAAKP,UAAU,OAAf,SAAuBO,UAYvBb,GAzCmB,WACtB,IAAIM,EAAY,eAGhB,OAFAc,QAAQC,IAAIvB,GACRA,EAAU,KAAIQ,GAAa,UAE9B,sBAAKA,UAAU,oBAAf,UACC,sBAAKA,UAAWA,EAAhB,UACEgB,KAAKC,MAAMzB,EAAO,OACnB,sBAAMQ,UAAU,OAAhB,qBAED,sBAAKA,UAAWA,EAAhB,UAA4BgB,KAAKC,MAAOzB,EAAO,KAAgB,IAAI,sBAAMQ,UAAU,OAAhB,sBACnE,sBAAKA,UAAWA,EAAhB,UAA4BgB,KAAKC,MAAOzB,EAAU,GAAM,IAAI,sBAAMQ,UAAU,OAAhB,wBAC5D,sBAAKA,UAAWA,EAAhB,UAA4BgB,KAAKC,MAAOzB,EAAW,IAAI,sBAAMQ,UAAU,OAAhB,2BA6BvCkB,OAEfxB,GAAe,qBAAKM,UAAU,YAAYmB,QAtDzB,WACpB1B,EAAWF,KACXI,GAAe,IAoDG,mBAChBD,GAAe,qBAAKM,UAAU,YAAWmB,QAlDvB,WACpB7B,EAASR,GACTW,EAAW,GACXE,GAAe,IA+CE,mBAChB,sBAAKK,UAAU,oBAAf,UACC,qBAAKA,UAAU,YACf,qBAAKA,UAAU,YACf,qBAAKA,UAAU,YACf,qBAAKA,UAAU,mBC3EJoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c610a858.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nconst initial = {\n\tDAYS: 0,\n\tHOURS: 0,\n\tMINUTES: 0,\n\tSECONDS: 0,\n};\n\nfunction App() {\n\n\tconst [input, setInput] = useState(initial);\n\n\tconst calc = () => {\n\t\tlet { DAYS, HOURS, MINUTES, SECONDS } = input;\n\t\treturn ((DAYS) * 86400) + ((HOURS) * 3600) + ((MINUTES) * 60) + SECONDS;\n\t}\n\n\tconst [counter, setCounter] = useState(calc());\n\tconst [showCounter, setShowCounter] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst timer = counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n\t\treturn () => clearInterval(timer);\n\t}, [counter]);\n\n\tconst startCounter = () => {\n\t\tsetCounter(calc());\n\t\tsetShowCounter(true);\n\t}\n\n\tconst resetCounter = () => {\n\t\tsetInput(initial);\n\t\tsetCounter(0);\n\t\tsetShowCounter(false)\n\t}\n\n\tconst renderTimeLeft = () => {\n\t\tlet className = \"counter-unit\";\n\t\tconsole.log(counter)\n\t\tif (counter < 60) className += \" shake\";\n\t\treturn (\n\t\t\t<div className=\"counter-container\">\n\t\t\t\t<div className={className}>\n\t\t\t\t\t{Math.floor(counter / (60 * 60 * 24))}\n\t\t\t\t\t<span className=\"unit\">DAYS</span>\n\t\t\t\t</div>\n\t\t\t\t<div className={className}>{Math.floor((counter / (60 * 60)) % 24)}<span className=\"unit\">HOURS</span></div>\n\t\t\t\t<div className={className}>{Math.floor((counter / 60) % 60)}<span className=\"unit\">MINUTES</span></div>\n\t\t\t\t<div className={className}>{Math.floor((counter) % 60)}<span className=\"unit\">SECONDS</span></div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst renderInputs = () => {\n\t\treturn Object.keys(input).map((unit) => {\n\t\t\treturn (\n\t\t\t\t<div className=\"inputContainer\">\n\t\t\t\t\t<input \n\t\t\t\t\t\tonChange={({target}) => setInput(state => ({...state, [unit]: target.value}))}\n\t\t\t\t\t\tvalue={input[unit]}\n\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\tplaceholder={\"00\"}\n\t\t\t\t\t\tmaxLength={2}\n\t\t\t\t\t\tkey={unit}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"unit\">{unit}</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"brand\">KOALA</div>\n\t\t\t<img src=\"https://i.ibb.co/2gDN8M8/koala-logo.png\" className=\"logo\" alt=\"koala-logo\" border=\"0\" />\n\t\t\t<div className=\"input-container\">\n\t\t\t\t{!showCounter && renderInputs()}\n\t\t\t\t{showCounter && renderTimeLeft()}\n\t\t\t</div>\n\t\t\t{!showCounter && <div className=\"btn-start\" onClick={startCounter}>START</div>}\n\t\t\t{showCounter && <div className=\"btn-reset\"onClick={resetCounter}>RESET</div>}\n\t\t\t<div className=\"balloon-container\">\n\t\t\t\t<div className=\"balloon\"></div>\n\t\t\t\t<div className=\"balloon\"></div>\n\t\t\t\t<div className=\"balloon\"></div>\n\t\t\t\t<div className=\"balloon\"></div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}